AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC ID for security group"
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: "Subnet ID for instance"
  BackupCronExpression:
    Type: String
    Default: "0 2 * * *" # Every day at 2:00 AM
    Description: "Cron expression to run the backup"
  ResourcesBucketName:
    Type: String
    Description: "S3 bucket name"

Resources:

  Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0bf0565838358789b # Amazon Linux 2 LTS Arm64 AMI 2.0.20230119.1 arm64 HVM gp2 
      InstanceType: t4g.small
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: just-a-db
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref SubnetId
      Tags:
        - Key: Name
          Value: just-a-db
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y

          echo "Instaling docker and docker-compose"
          amazon-linux-extras install docker -y
          service docker start
          usermod -a -G docker ec2-user

          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

          echo "Install git and clone the repo"
          yum install -y git

          su ec2-user << EOF
            git clone https://github.com/CrissAlvarezH/just-a-db /home/ec2-user/just-a-db
            cd /home/ec2-user/just-a-db

            sh ./scripts/entrypoint.sh register-backup-cron "${BackupCronExpression}"
            export S3_BUCKET=${ResourcesBucketName}
            sh ./scripts/entrypoint.sh generate-env-files
            sh ./scripts/entrypoint.sh start
          EOF

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: just-a-db security group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
  
  ElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Instance
      Tags:
        - Key: Name
          Value: just-a-db

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: just-a-db-instance-profile
      Roles:
        - !Ref InstanceRole

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: just-a-db-s3-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: 
                  - !Sub arn:aws:s3:::${ResourcesBucketName}/*
                  - !Sub arn:aws:s3:::${ResourcesBucketName}
        - PolicyName: just-a-db-logs-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 
                  - !GetAtt BackupsLogGroup.Arn
                  - !GetAtt DatabaseLogGroup.Arn

  BackupsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: just-a-db/backups-logs
      RetentionInDays: 14

  DatabaseLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: just-a-db/database-logs
      RetentionInDays: 14

Outputs:
  ElasticIP:
    Description: The elastic IP address of the EC2 instance
    Value: !Ref ElasticIP 
